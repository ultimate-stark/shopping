//! req

IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: false,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: false,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     paused: true,
     emitClose: true,
     autoDestroy: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: false,
     decoder: null,
     encoding: null },
  readable: false,
  _events:
   [Object: null prototype] {
     end: [Function: resetHeadersTimeoutOnReqEnd],
     readable: [Function: bound ] },
  _eventsCount: 2,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 10 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 10 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 1586636657048,
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 160,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 17231,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 161,
        [Symbol(triggerId)]: 160 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 10 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 10 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 1586636657048,
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 160,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 17231,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 161,
        [Symbol(triggerId)]: 160 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { host: 'localhost:3000',
     connection: 'keep-alive',
     'content-length': '52548',
     pragma: 'no-cache',
     'cache-control': 'no-cache',
     accept: 'application/json, text/plain, */*',
     'user-agent':
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36',
     'content-type':
      'multipart/form-data; boundary=----WebKitFormBoundaryffWbS3byiOmzaz8n',
     origin: 'http://localhost:4200',
     'sec-fetch-site': 'same-site',
     'sec-fetch-mode': 'cors',
     'sec-fetch-dest': 'empty',
     referer: 'http://localhost:4200/create',
     'accept-encoding': 'gzip, deflate, br',
     'accept-language': 'en-US,en;q=0.9' },
  rawHeaders:
   [ 'Host',
     'localhost:3000',
     'Connection',
     'keep-alive',
     'Content-Length',
     '52548',
     'Pragma',
     'no-cache',
     'Cache-Control',
     'no-cache',
     'Accept',
     'application/json, text/plain, */*',
     'User-Agent',
     'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36',
     'Content-Type',
     'multipart/form-data; boundary=----WebKitFormBoundaryffWbS3byiOmzaz8n',
     'Origin',
     'http://localhost:4200',
     'Sec-Fetch-Site',
     'same-site',
     'Sec-Fetch-Mode',
     'cors',
     'Sec-Fetch-Dest',
     'empty',
     'Referer',
     'http://localhost:4200/create',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Accept-Language',
     'en-US,en;q=0.9' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/',
  method: 'POST',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 10 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 4,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 10 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 1586636657048,
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 160,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 17231,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 161,
        [Symbol(triggerId)]: 160 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _consuming: true,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/api/products',
  originalUrl: '/api/products/',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/',
     path: '/',
     href: '/',
     _raw: '/' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      [Object: null prototype] { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 160,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 17231,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 161,
           [Symbol(triggerId)]: 160 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 160,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 17231,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 161,
           [Symbol(triggerId)]: 160 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]:
      [Object: null prototype] {
        'x-powered-by': [Array],
        'access-control-allow-origin': [Array],
        'access-control-allow-headers': [Array],
        'access-control-allow-methods': [Array] } },
  body:
   [Object: null prototype] {
     name: 'asdas',
     description: 'dfsdf',
     price: '10',
     category: 'Pyramids' },
  route:
   Route {
     path: '',
     stack: [ [Layer], [Layer] ],
     methods: { post: true } },
  file:
   { fieldname: 'image',
     originalname: 'asdas',
     encoding: '7bit',
     mimetype: 'image/jpeg',
     destination: 'backend/images',
     filename: 'asdas-1586636657069.jpg',
     path: 'backend\\images\\asdas-1586636657069.jpg',
     size: 51972 } }







     //! saved in the database


     { _id: 5e922c0f8250de39746d8aa9,
      name: 'Fiction',
      description: 'xasad',
      price: 10,
      category: 'sdasasd',
      image: 'http://localhost:3000/images/fiction-1586637839854.jpg',
      __v: 0 }








      // ! res

      ServerResponse {
        _events:
         [Object: null prototype] { finish: [Function: bound resOnFinish] },
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: true,
              onread: [Function: onStreamRead],
              onconnection: null,
              _consumed: true,
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              paused: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events:
            [Object: null prototype] {
              end: [Array],
              drain: [Array],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: [Array],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 8,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: true,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              headersTimeout: 40000,
              _connectionKey: '6::::3000',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(asyncId)]: 10 },
           _server:
            Server {
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              headersTimeout: 40000,
              _connectionKey: '6::::3000',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(asyncId)]: 10 },
           timeout: 120000,
           parser:
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              socket: [Circular],
              incoming: [IncomingMessage],
              outgoing: null,
              maxHeaderPairs: 2000,
              _consumed: true,
              onIncoming: [Function: bound parserOnIncoming],
              parsingHeadersStart: 1586638015051,
              [Symbol(isReused)]: false },
           on: [Function: socketOnWrap],
           _paused: false,
           _httpMessage: [Circular],
           _peername: { address: '::1', family: 'IPv6', port: 55866 },
           [Symbol(asyncId)]: 173,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]:
            Timeout {
              _called: false,
              _idleTimeout: 120000,
              _idlePrev: [TimersList],
              _idleNext: [TimersList],
              _idleStart: 22764,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(unrefed)]: true,
              [Symbol(asyncId)]: 174,
              [Symbol(triggerId)]: 173 },
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        connection:
         Socket {
           connecting: false,
           _hadError: false,
           _handle:
            TCP {
              reading: true,
              onread: [Function: onStreamRead],
              onconnection: null,
              _consumed: true,
              [Symbol(owner)]: [Circular] },
           _parent: null,
           _host: null,
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: true,
              ended: false,
              endEmitted: false,
              reading: true,
              sync: false,
              needReadable: true,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              paused: false,
              emitClose: false,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: true,
           _events:
            [Object: null prototype] {
              end: [Array],
              drain: [Array],
              timeout: [Function: socketOnTimeout],
              data: [Function: bound socketOnData],
              error: [Function: socketOnError],
              close: [Array],
              resume: [Function: onSocketResume],
              pause: [Function: onSocketPause] },
           _eventsCount: 8,
           _maxListeners: undefined,
           _writableState:
            WritableState {
              objectMode: false,
              highWaterMark: 16384,
              finalCalled: false,
              needDrain: false,
              ending: false,
              ended: false,
              finished: false,
              destroyed: false,
              decodeStrings: false,
              defaultEncoding: 'utf8',
              length: 0,
              writing: false,
              corked: 0,
              sync: true,
              bufferProcessing: false,
              onwrite: [Function: bound onwrite],
              writecb: null,
              writelen: 0,
              bufferedRequest: null,
              lastBufferedRequest: null,
              pendingcb: 0,
              prefinished: false,
              errorEmitted: false,
              emitClose: false,
              autoDestroy: false,
              bufferedRequestCount: 0,
              corkedRequestsFree: [Object] },
           writable: true,
           allowHalfOpen: true,
           _sockname: null,
           _pendingData: null,
           _pendingEncoding: '',
           server:
            Server {
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              headersTimeout: 40000,
              _connectionKey: '6::::3000',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(asyncId)]: 10 },
           _server:
            Server {
              _events: [Object],
              _eventsCount: 4,
              _maxListeners: undefined,
              _connections: 1,
              _handle: [TCP],
              _usingWorkers: false,
              _workers: [],
              _unref: false,
              allowHalfOpen: true,
              pauseOnConnect: false,
              httpAllowHalfOpen: false,
              timeout: 120000,
              keepAliveTimeout: 5000,
              maxHeadersCount: null,
              headersTimeout: 40000,
              _connectionKey: '6::::3000',
              [Symbol(IncomingMessage)]: [Function],
              [Symbol(ServerResponse)]: [Function],
              [Symbol(asyncId)]: 10 },
           timeout: 120000,
           parser:
            HTTPParser {
              '0': [Function: parserOnHeaders],
              '1': [Function: parserOnHeadersComplete],
              '2': [Function: parserOnBody],
              '3': [Function: parserOnMessageComplete],
              '4': [Function: bound onParserExecute],
              _headers: [],
              _url: '',
              socket: [Circular],
              incoming: [IncomingMessage],
              outgoing: null,
              maxHeaderPairs: 2000,
              _consumed: true,
              onIncoming: [Function: bound parserOnIncoming],
              parsingHeadersStart: 1586638015051,
              [Symbol(isReused)]: false },
           on: [Function: socketOnWrap],
           _paused: false,
           _httpMessage: [Circular],
           _peername: { address: '::1', family: 'IPv6', port: 55866 },
           [Symbol(asyncId)]: 173,
           [Symbol(lastWriteQueueSize)]: 0,
           [Symbol(timeout)]:
            Timeout {
              _called: false,
              _idleTimeout: 120000,
              _idlePrev: [TimersList],
              _idleNext: [TimersList],
              _idleStart: 22764,
              _onTimeout: [Function: bound ],
              _timerArgs: undefined,
              _repeat: null,
              _destroyed: false,
              [Symbol(unrefed)]: true,
              [Symbol(asyncId)]: 174,
              [Symbol(triggerId)]: 173 },
           [Symbol(kBytesRead)]: 0,
           [Symbol(kBytesWritten)]: 0 },
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req:
         IncomingMessage {
           _readableState:
            ReadableState {
              objectMode: false,
              highWaterMark: 16384,
              buffer: BufferList { head: null, tail: null, length: 0 },
              length: 0,
              pipes: null,
              pipesCount: 0,
              flowing: false,
              ended: true,
              endEmitted: true,
              reading: false,
              sync: false,
              needReadable: false,
              emittedReadable: false,
              readableListening: false,
              resumeScheduled: false,
              paused: true,
              emitClose: true,
              autoDestroy: false,
              destroyed: false,
              defaultEncoding: 'utf8',
              awaitDrain: 0,
              readingMore: false,
              decoder: null,
              encoding: null },
           readable: false,
           _events:
            [Object: null prototype] {
              end: [Function: resetHeadersTimeoutOnReqEnd],
              readable: [Function: bound ] },
           _eventsCount: 2,
           _maxListeners: undefined,
           socket:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 8,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: true,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              timeout: 120000,
              parser: [HTTPParser],
              on: [Function: socketOnWrap],
              _paused: false,
              _httpMessage: [Circular],
              _peername: [Object],
              [Symbol(asyncId)]: 173,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]:
               Timeout {
                 _called: false,
                 _idleTimeout: 120000,
                 _idlePrev: [TimersList],
                 _idleNext: [TimersList],
                 _idleStart: 22764,
                 _onTimeout: [Function: bound ],
                 _timerArgs: undefined,
                 _repeat: null,
                 _destroyed: false,
                 [Symbol(unrefed)]: true,
                 [Symbol(asyncId)]: 174,
                 [Symbol(triggerId)]: 173 },
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           connection:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 8,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: true,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              timeout: 120000,
              parser: [HTTPParser],
              on: [Function: socketOnWrap],
              _paused: false,
              _httpMessage: [Circular],
              _peername: [Object],
              [Symbol(asyncId)]: 173,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]:
               Timeout {
                 _called: false,
                 _idleTimeout: 120000,
                 _idlePrev: [TimersList],
                 _idleNext: [TimersList],
                 _idleStart: 22764,
                 _onTimeout: [Function: bound ],
                 _timerArgs: undefined,
                 _repeat: null,
                 _destroyed: false,
                 [Symbol(unrefed)]: true,
                 [Symbol(asyncId)]: 174,
                 [Symbol(triggerId)]: 173 },
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           httpVersionMajor: 1,
           httpVersionMinor: 1,
           httpVersion: '1.1',
           complete: true,
           headers:
            { host: 'localhost:3000',
              connection: 'keep-alive',
              'content-length': '158489',
              pragma: 'no-cache',
              'cache-control': 'no-cache',
              accept: 'application/json, text/plain, */*',
              'user-agent':
               'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36',
              'content-type':
               'multipart/form-data; boundary=----WebKitFormBoundaryofhAB3Bni0JBAJ9a',
              origin: 'http://localhost:4200',
              'sec-fetch-site': 'same-site',
              'sec-fetch-mode': 'cors',
              'sec-fetch-dest': 'empty',
              referer: 'http://localhost:4200/create',
              'accept-encoding': 'gzip, deflate, br',
              'accept-language': 'en-US,en;q=0.9' },
           rawHeaders:
            [ 'Host',
              'localhost:3000',
              'Connection',
              'keep-alive',
              'Content-Length',
              '158489',
              'Pragma',
              'no-cache',
              'Cache-Control',
              'no-cache',
              'Accept',
              'application/json, text/plain, */*',
              'User-Agent',
              'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36',
              'Content-Type',
              'multipart/form-data; boundary=----WebKitFormBoundaryofhAB3Bni0JBAJ9a',
              'Origin',
              'http://localhost:4200',
              'Sec-Fetch-Site',
              'same-site',
              'Sec-Fetch-Mode',
              'cors',
              'Sec-Fetch-Dest',
              'empty',
              'Referer',
              'http://localhost:4200/create',
              'Accept-Encoding',
              'gzip, deflate, br',
              'Accept-Language',
              'en-US,en;q=0.9' ],
           trailers: {},
           rawTrailers: [],
           aborted: false,
           upgrade: false,
           url: '/',
           method: 'POST',
           statusCode: null,
           statusMessage: null,
           client:
            Socket {
              connecting: false,
              _hadError: false,
              _handle: [TCP],
              _parent: null,
              _host: null,
              _readableState: [ReadableState],
              readable: true,
              _events: [Object],
              _eventsCount: 8,
              _maxListeners: undefined,
              _writableState: [WritableState],
              writable: true,
              allowHalfOpen: true,
              _sockname: null,
              _pendingData: null,
              _pendingEncoding: '',
              server: [Server],
              _server: [Server],
              timeout: 120000,
              parser: [HTTPParser],
              on: [Function: socketOnWrap],
              _paused: false,
              _httpMessage: [Circular],
              _peername: [Object],
              [Symbol(asyncId)]: 173,
              [Symbol(lastWriteQueueSize)]: 0,
              [Symbol(timeout)]:
               Timeout {
                 _called: false,
                 _idleTimeout: 120000,
                 _idlePrev: [TimersList],
                 _idleNext: [TimersList],
                 _idleStart: 22764,
                 _onTimeout: [Function: bound ],
                 _timerArgs: undefined,
                 _repeat: null,
                 _destroyed: false,
                 [Symbol(unrefed)]: true,
                 [Symbol(asyncId)]: 174,
                 [Symbol(triggerId)]: 173 },
              [Symbol(kBytesRead)]: 0,
              [Symbol(kBytesWritten)]: 0 },
           _consuming: true,
           _dumped: false,
           next: [Function: next],
           baseUrl: '/api/products',
           originalUrl: '/api/products/',
           _parsedUrl:
            Url {
              protocol: null,
              slashes: null,
              auth: null,
              host: null,
              port: null,
              hostname: null,
              hash: null,
              search: null,
              query: null,
              pathname: '/',
              path: '/',
              href: '/',
              _raw: '/' },
           params: {},
           query: {},
           res: [Circular],
           body:
            [Object: null prototype] {
              name: 'ssdas',
              description: 'sdasdad',
              price: '44',
              category: 'Pyramids' },
           route: Route { path: '', stack: [Array], methods: [Object] },
           file:
            { fieldname: 'image',
              originalname: 'ssdas',
              encoding: '7bit',
              mimetype: 'image/jpeg',
              destination: 'backend/images',
              filename: 'ssdas-1586638015068.jpg',
              path: 'backend\\images\\ssdas-1586638015068.jpg',
              size: 157911 } },
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]:
         [Object: null prototype] {
           'x-powered-by': [ 'X-Powered-By', 'Express' ],
           'access-control-allow-origin': [ 'Access-Control-Allow-Origin', '*' ],
           'access-control-allow-headers':
            [ 'Access-Control-Allow-Headers',
              'Origin, X-Requested-With, Content-Type, Accept, Authorization' ],
           'access-control-allow-methods':
            [ 'Access-Control-Allow-Methods',
              'GET, POST, PATCH, PUT, DELETE, OPTIONS' ] } }












